<?php

namespace ServicesBundle\Controller;

use Doctrine\DBAL\Types\TextType;
use FixitBundle\Entity\User;
use ServicesBundle\Entity\Services;
use ServicesBundle\ServicesBundle;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\Form\Extension\Core\Type\FormType;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * Service controller.
 *
 * @Route("services")
 */
class ServicesController extends Controller
{




    /**
     * Lists all service entities.
     *
     * @Route("/", name="services_index")
     * @Method("GET")
     */
    public function indexAction()
    {

        $em = $this->getDoctrine()->getManager();

        $topuser=$em->getRepository('ServicesBundle:Services')->TopView();

        $services = $em->getRepository('ServicesBundle:Services')->findAll();

        return $this->render('@Services/services/index.html.twig', array(
            'services' => $services,'topusers' => $topuser,
        ));
    }

    /**
     * Creates a new service entity.
     *
     * @Route("/new", name="services_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {

        $user=$this->getUser();
        $service = new Services();
        $service->setAutorise(0);

        $form = $this->createForm('ServicesBundle\Form\ServicesType', $service);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @var UploadedFile $file
             */
            $file=$service->getImage();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('images_directory'),$filename);
            $service->setImage($filename);
            $service->setUser($this->getUser());
            $em = $this->getDoctrine()->getManager();

            $em->persist($service);
            $em->flush();

            return $this->redirectToRoute('services_show', array('id' => $service->getId()));
        }

        return $this->render('@Services/services/new.html.twig', array(
            'service' => $service,
            'form' => $form->createView(),
        ));
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a service entity.
     *
     * @Route("/{id}", name="services_show")
     * @Method("GET")
     */
    public function showAction(Services $service)
    {
        $deleteForm = $this->createDeleteForm($service);


        return $this->render('@Services/services/show.html.twig', array(
            'service' => $service,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing service entity.
     *
     * @Route("/{id}/edit", name="services_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Services $service)
    {   $user = $this->getUser();

        $deleteForm = $this->createDeleteForm($service);
        $editForm = $this->createForm('ServicesBundle\Form\ServicesType', $service);
        $editForm->handleRequest($request);


        $service->setImage(new File($this->getParameter('images_directory').'/'.$service->getImage()));
        if ($editForm->isSubmitted() && $editForm->isValid()) {

            /**
             * @var UploadedFile $file
             */
            $file=$service->getImage();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('images_directory'),$filename);
            $service->setImage($filename);




            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('services_edit', array('id' => $service->getId()));
        }

        return $this->render('@Services/services/edit.html.twig', array(
            'service' => $service,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a service entity.
     *
     * @Route("/delete/{id}", name="services_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Services $service)
    {
        $form = $this->createDeleteForm($service);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($service);
            $em->flush();
        }

        return $this->redirectToRoute('services_index');
    }

    /**
     * Creates a form to delete a service entity.
     *
     * @param Services $service The service entity
     *
     * @return \Symfony\Component\Form\FormInterface The form
     */
    private function createDeleteForm(Services $service)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('services_delete', array('id' => $service->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
    public function adminautoriseAction(Services $services){

        $em = $this->getDoctrine()->getManager();
        $id=$services->getId();
        $auto=$this->getDoctrine()->getRepository(Services::class)->findOneById($id);
        $services->setAutorise(1);
        $em->persist($auto);
        $em->flush();

        return $this->redirectToRoute('services_index_admin');



    }




}
